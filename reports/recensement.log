Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
df_metier = df[['DIPL', 'EMPL', 'CS8']].dropna()
sns.set(font_scale = 2)
fig, ax = plt.subplots(figsize=(50, 30))
df_counts = df_metier.groupby(['DIPL', 'EMPL']).size().reset_index()
df_counts.columns.values[df_counts.columns == 0] = 'count'
scale = 500*df_counts['count'].size
size = df_counts['count']/df_counts['count'].sum()*scale
#size = size.astype(float)

#sns.stripplot(x='DIPL', y='EMPL', hue='CS8', data=df_metier, ax=ax) #, size=size, sizes=(10,500)
dipl_id = [1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19]
dipl_lbl = ['Pas de scolarisation', 'Aucun dipl√¥me mais scolarisation jusqu‚Äôen primaire', 'Aucun dipl√¥me mais scolarisation jusqu‚Äôau coll√®ge', 
            'Aucun dipl√¥me mais scolarisation au-del√† du coll√®ge', 'CEP' , 'BEPC, brevet √©l√©mentaire, brevet des coll√®ges, DNB' , 'CAP, BEP ou dipl√¥me de niveau √©quivalent',
            'Bac g√©n√©ral ou technologique, brevet sup√©rieur, capacit√© en droit, DAEU, ESEU',
            'Bac professionnel, brevet professionnel de technicien ou d‚Äôenseignement, dipl√¥me √©quivalent',
            'BTS, DUT, Deug, Deust, dipl√¥me de sant√© ou du social niveau bac + 2, dipl√¥me √©quivalent',
            'Licence, Licence pro, ma√Ætrise, dipl√¥me √©quivalent de niveau bac + 3 ou bac + 4',
            'Master, DEA, dipl√¥me grande √©cole niveau bac + 5, doctorat de sant√©',
            'Doctorat de recherche (hors sant√©)']
#plt.xticks(dipl_id, dipl_lbl, rotation=45, )

empl_lbl = ['Artisan, commer√ßant, industriel, travailleur ind√©pendant', 'Stagiaire r√©mun√©r√©, apprenti sous contrat',
            'Salari√© du secteur priv√© √† dur√©e d√©termin√©e', 'Salari√© du secteur priv√© √† dur√©e ind√©termin√©e',
            'Salari√© du secteur public √† dur√©e d√©termin√©e', 'Salari√© du secteur public √† dur√©e ind√©termin√©']


from sklearn.preprocessing import OrdinalEncoder
import numpy as np
ord_enc = OrdinalEncoder()
enc_df = pd.DataFrame(ord_enc.fit_transform(df_metier), columns=list(df_metier.columns))

xnoise, ynoise = np.random.random(len(df_metier))/2, np.random.random(len(df_metier))/2 

sns.scatterplot(enc_df["DIPL"]+xnoise, enc_df["EMPL"]+ynoise, alpha=0.5, hue=enc_df['CS8'], palette="hls")

plt.yticks(np.arange(0.25, len(empl_lbl)+0.25, 1), empl_lbl)

xrange = np.arange(0.25, len(dipl_lbl)+0.25, 1)
plt.xticks(xrange, dipl_lbl, rotation=90)

plt.legend(title='Categories socioprofessionnelles', loc='lower left', labels=['Agriculteurs exploitants', 'Artisans, commer√ßants et chefs d\'entreprise',
                                                         'Cadres et professions intellectuelles sup√©rieures', 'Professions Interm√©diaires',
                                                         'Employ√©s', 'Ouvriers'])

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [11][0m, in [0;36m<cell line: 27>[0;34m()[0m
[1;32m     20[0m [38;5;66;03m#plt.xticks(dipl_id, dipl_lbl, rotation=45, )[39;00m
[1;32m     22[0m empl_lbl [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mArtisan, commer√ßant, industriel, travailleur ind√©pendant[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mStagiaire r√©mun√©r√©, apprenti sous contrat[39m[38;5;124m'[39m,
[1;32m     23[0m             [38;5;124m'[39m[38;5;124mSalari√© du secteur priv√© √† dur√©e d√©termin√©e[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mSalari√© du secteur priv√© √† dur√©e ind√©termin√©e[39m[38;5;124m'[39m,
[1;32m     24[0m             [38;5;124m'[39m[38;5;124mSalari√© du secteur public √† dur√©e d√©termin√©e[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mSalari√© du secteur public √† dur√©e ind√©termin√©[39m[38;5;124m'[39m]
[0;32m---> 27[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpreprocessing[39;00m [38;5;28;01mimport[39;00m OrdinalEncoder
[1;32m     28[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m     29[0m ord_enc [38;5;241m=[39m OrdinalEncoder()

[0;31mModuleNotFoundError[0m: No module named 'sklearn'
ModuleNotFoundError: No module named 'sklearn'

